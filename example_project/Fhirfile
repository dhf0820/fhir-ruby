# vim:ft=ruby

::FHIR_PATH = File.expand_path(File.dirname(__FILE__))
require FHIR_PATH + '/gen/node_functions.rb'
require FHIR_PATH + '/gen/selection_functions.rb'
require FHIR_PATH + '/gen/expand_graph.rb'
require FHIR_PATH + '/gen/rules.rb'



configure do |cfg|
  cfg.fhir_xml = FHIR_PATH + '/../spec/tmp/cache.xml'
  cfg.datatypes_xsd = FHIR_PATH + '/../fhir-base.xsd'
  cfg.node_modules = [::NodeFunctions]
  cfg.selection_modules = [::SelectionFunctions]
end

generate do |graph|
  models_folder = File.dirname(__FILE__)+ '/models/fhir'
  migrations_folder = File.dirname(__FILE__)+ '/migrations'
  FileUtils.rm_rf(models_folder)
  FileUtils.rm_rf(migrations_folder)
  FileUtils.mkdir_p(migrations_folder)

  Rules.apply(graph)
  ExpandGraph.new(graph).expand


  branch = graph.selection.branches(['MedicationStatement'], ['AllergyIntolerance'], ['Condition'])
  .reject { |node| %w[contained extension].include?(node.name) }

  File.open(File.join(migrations_folder, 'schema.rb'), 'w') do |f|
    f.write  %Q[execute "drop schema fhir cascade; create schema fhir;"\n]
    f.write  branch.tables
    .template(path: "#{FHIR_PATH}/templates/migration.rb.erb")
    .render(0)
  end

  branch
  .models
  .template(path: "#{FHIR_PATH}/templates/model.rb.erb")
  .file(models_folder) {|n| "#{n.class_file_name}.rb" }

  branch
  .value_objects
  .template(path: "#{::FHIR_PATH}/templates/composing_model.rb.erb")
  .file(models_folder) {|n| "#{n.class_file_name}.rb" }
end
